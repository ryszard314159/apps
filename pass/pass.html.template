<!doctype html>
<!--based on
https://www.jqueryscript.net/tags.php?/Password%20Generator"
jQuery Password Generator
-->
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=128">
<title>Password Generator</title>


<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

<!--
.container {
  margin-top:16px;
  max-width:256px;
}
-->

<style>body {
  font-family: "Arial";
}
button {
    margin: 0 auto;
    display: block;
}
.container {
  margin-top:16px;
  max-width:300px;
  justify-content: center;
}

.p1 {font-family: "Times New Roman", Times, serif;}
.p2 {font-family: Arial, Helvetica, sans-serif;}
.p3 {font-family: "Courier New", monospace;}
  div {
    margin-bottom: 10px;
  }
  label {
    display: inline-block;
    width: 150px;
    text-align: left;
  }
</style>

</head>

<p class="p3">

<body>
<div class="container">
  <h3 style="text-align:center;">Password Generator</h3>

<script>
const chars = {}
chars.digits = 'DIGITS'
chars.lower = 'LOWER_CHARS'
chars.upper = chars.lower.toUpperCase()
chars.punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
// chars.all = chars.digits + chars.lower + chars.upper + chars.punctuation
</script>


<div class="container";
<label style="text-align:center;">
  ...characters to use...
</label>
<input id="charset" type="text" class="form-control" value=''>
<script>
document.getElementById("charset").value = chars.digits + chars.lower + chars.upper
</script>
</div>


<div class="form-group" style="display:flex;"></div>
<p class="p3">
<div class="container" style="display:flex;">
  <label>Seed:</label>
  <input id="seed" class="form-control" style="background-color:lightblue;" value='' />
</div>
<div class="container" style="display:flex;">
  <label>Secret:</label>
  <input id="sekret" class="form-control" value='' />
</div>
<div class="container" style="display:flex;">
  <label>Prefix:</label>
  <input id="prefix" class="form-control" value='DEFAULT_PREFIX'>
</div>
<div class="container" style="display:flex;">
  <label>Length:</label>
  <input id="length" class="form-control" value="DEFAULT_LENGTH">
</div>
<div class="container" style="display:flex;">
  <button id="generate" class="btn btn-default"
        style="background-color:lightgreen;font-weight:900;width:100%;text-align:center">
        Generate and copy to clipboard
  </button>
</div>

<hr style="background-color:red;height:1px;margin-left:4% !important; margin-right:4% !important;">
<div class="container" style="display:flex;"id="passwords"></div>
<hr style="background-color:red;height:1px;margin-left:4% !important; margin-right:4% !important;">

<script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>

<script>
function hash_string(s) {
  const p = 2**5 - 1, m = 2**31 - 1; // Mersenne primes
  var value = 0, pp = 1;
  // xmin = lowest_code(s) // lowest code for chars in string
  // xmin = 1
  for (var j=0; j < s.length; j++) {
      value = (value + s.charCodeAt(j) * pp) % m;
      pp = (pp * p) % m;
  }
  return value;
}

// random integer generator for integers in [0, max) interval
function* rig(max, seed) {
  let m=2**31-1, a=2147483629, c=2147483587;
  if (typeof window === 'undefined') {
    var assert = require('assert');
    if (typeof max === 'number') {
       assert((0 < max) && (max < m),
             'rig: max (=' + max + ') has to be smaller than 2**31 - 1')
    }
  }
  if (typeof seed === 'undefined' || seed == '') {
    seed = Date.now();
  } else {
    seed = hash_string(seed)
  }
  while (true) {
    seed = (a * seed + c) % m;
    yield (typeof max === 'undefined') ? seed : Math.abs(seed % max)
  }
}

function get_random_string(n, charset='', seed=undefined) {
  /*
  n       : length of string to generate
  charset : alphabet to use; NOTE: all unicode chars will be used if charset == ''
  seed    : seed string for reproducible output
  */
  const MAX_CODE_POINT = 1114111 + 1;
  if (typeof window === 'undefined') {
    var assert = require('assert')
    assert(n > 0, 'n must be greater than 0')
    assert(charset.length < MAX_CODE_POINT, "too long charset")
  }
  let max = (charset !== '')? charset.length : undefined
  /*
  see:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode
  */
  const g = rig(max, seed);
  let z = '';
  for (let i=0; i < n; i++) {
    let k = g.next().value % MAX_CODE_POINT
    z += (charset !== '')? charset[k] : String.fromCodePoint(k)
  }
  return z
}


/*
from: https://www.30secondsofcode.org/js/s/copy-to-clipboard
see also: https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard
*/
const copyToClipboard = str => {
  const el = document.createElement('textarea');
  el.value = str;
  el.setAttribute('readonly', '');
  el.style.position = 'absolute';
  el.style.left = '-9999px';
  document.body.appendChild(el);
  const selected =
    document.getSelection().rangeCount > 0
      ? document.getSelection().getRangeAt(0)
      : false;
  el.select();
  document.execCommand('copy');
  document.body.removeChild(el);
  if (selected) {
    document.getSelection().removeAllRanges();
    document.getSelection().addRange(selected);
  }
};

// var g = randint_gen(charset.length, )
$("#reload").click(function() {location.reload()})
$("#generate").click(function() {
  // allow for seed modification using SECRET env
  // this can be overwritten from command line using --sekret argument
  var k = ''
  if (typeof process !== 'undefined') {
    if (process.env.SEKRET != undefined) {k = process.env.SEKRET}
  }
  if ($('#sekret').val() != '') {k = $('#sekret').val()}
  var seed = $('#seed').val() + k
  var charset = $('#charset').val();
  console.log("generate: charset=", charset);
  console.log("generate: seed=", seed);
  let n = parseInt($('#length').val()) - $('#prefix').val().length
  let password = $('#prefix').val() + get_random_string(n, charset, seed)
  console.log("password=", password, "password.length=", password.length)
  copyToClipboard(password);
  if (password.length < 4*n) {
    password = password.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    copyToClipboard(password);
    /* code below works in node.js,
       but in the broswer causes: ReferenceError: require is not defined
    const CLIP = require('clipboardy');
    CLIP.writeSync(password);
    */
	  $('#passwords').prepend(password + '<br/>');
  } else {
    console.log("ERROR: password.length, n=", password.length , n);
  }
});
// copyToClipboard(password);
</script>

</body>
</html>
